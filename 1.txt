/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rsa;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.math.BigInteger;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;



/**
 *
 * @author hp
 */
public class RSA {

    /**
     * @param args the command line arguments
     * @throws java.io.IOException
     */
    public static void main(String[] args) throws IOException {
        // TODO code application logic here
        Scanner sc=new Scanner(System.in);//class to get user input
        
        ServerSocket m=new ServerSocket(2019); //creates server with port number
        Socket s=m.accept();
        DataInputStream d=new DataInputStream(s.getInputStream());
        String x1=d.readLine();
        String x2=d.readLine();
        
        int e,n;
        e=Integer.parseInt(x1);
        n=Integer.parseInt(x2);
        System.out.println("Public Key Obtained from client{e,n}={"+ e +","+ n +"}");
        
        int Parr[]=new int[100];
        String M;
        
        RSA obj =new RSA();
        
        System.out.println("Enter Plaintext:");
        M=sc.nextLine();
        Parr=obj.returnarr(M);
        
        BigInteger C[]=new BigInteger[100];
        int C1[]=new int[n];
        BigInteger n1;
        System.out.println("\nSending Cipher Texts=\n");
        for(int i=0;i<M.length();i++)
        {
            BigInteger M1;
            n1=BigInteger.valueOf(n);
            M1=BigInteger.valueOf(Parr[i]);
            
            C[i]=M1.pow(e);
            C[i]=C[i].mod(n1);
            System.out.println(C[i]+".");
            C1[i]=C[i].intValue();
        }
        System.out.println("\n");
        
        Socket skt=new Socket("localhost",2020);
        DataOutputStream out=new DataOutputStream(skt.getOutputStream());
        out.writeInt(M.length());
        for(int i=0;i<M.length();i++)
            out.writeInt(C1[i]);
    }

     int[] returnarr(String m) {
        int l=m.length();
        int i;
        char ch[]=m.toCharArray();
        int arr[]=new int[100];
        
        for(i=0;i<l;i++)
        {
            arr[i]=(int)ch[i];
        }
        return arr;
    }
    
}
/*
//client
package rsa;

import java.io.DataInputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.math.BigInteger;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;


public class RSA1 {
    public static void main(String args[])throws IOException
    {
        Scanner sc= new Scanner(System.in);
        int p,q,e;
        String M;
        System.out.println("Enter first prime Number:");
        p=sc.nextInt();
        for(int i=2;i<p;i++)
        {
            if(p%i==0)
            {
                System.out.println("Not a prime number, Enter prime no:");
                p=sc.nextInt();
                i=2;
                
            }
        }
        System.out.println("Enter second prime Number:");
        q=sc.nextInt();
        for(int i=2;i<q;i++)
        {
            if(q%i==0)
            {
                System.out.println("Not a prime number, Enter prime no:");
                q=sc.nextInt();
                i=2;
                
            }
        }
        int n=p*q;
        int Q=(p-1)*(q-1);
        RSA1 obj=new RSA1();
        
        e=obj.gete(Q);
        if(obj.gcd(e,Q)==true)
        {
            int d,l;
            d=obj.cald(e,Q);
            System.out.println("\nPublic key{e,n}={"+e+","+n+"}");
            System.out.println("\nPrivate key{d,n}={"+d+","+n+"}");
            
            Socket skt=new Socket("localhost",2019);
            PrintStream ps=new PrintStream(skt.getOutputStream());
            ps.println(e);
            ps.println(n);
            
            int x2[]=new int[100];
            
            ServerSocket m=new ServerSocket(2020);
            Socket s=m.accept();
            DataInputStream data=new DataInputStream(s.getInputStream());
            l=data.readInt();
            System.out.println("\nCipher text Received");
            for(int i=0;i<l;i++)
            {
                x2[i]=data.readInt();
                System.out.print(x2[i]+",");
            }
            System.out.println("\n");
            System.out.println("\nplain text decrypted using private key=");
            BigInteger n1;
            BigInteger P[]=new BigInteger[100];
            for(int i=0;i<l;i++)
            {
                n1=BigInteger.valueOf(n);
                BigInteger a=BigInteger.valueOf(x2[i]);
                P[i]=a.pow(d);
                P[i]=P[i].mod(n1);
                System.out.print((char)P[i].intValue());
                
            }
            System.out.println("\n");
            
            
        }
    }
    int cald(int e,int Q)
    {
        int i=2;
        while(((Q*i)+1)%e!=0)
        {
            i++;
        }
        return ((Q*i)+1)/e;
    }
    boolean gcd(int e,int Q)
    {
        while(Q!=e)
        {
            if(e>Q)
            {
                e=e-Q;
            }
            else
            {
                Q=Q-e;
            }
        }
        return Q==1;
    }
    
    int[] returnarr(String m)
    {
        int l=m.length();
        int i;
        char ch[]=m.toCharArray();
        int arr[]=new int[100];
        
        for(i=0;i<l;i++)
        {
            arr[i]=(int)ch[i];
        }
        return arr;
    }
    
    int gete(int Q)
    {
        int i=2;
        RSA1 obj1=new RSA1();
        while(obj1.gcd(i, Q)==false)
            i++;
        return i;
    }
    
}

*/
