#include<iostream>
using namespace std;
int n;
int mat[10][10],marked[10];
//int mat[10][10],marked[10];

int source=0;
//int path[10],pin=0;

int tsp(int mat[10][10],int marked[],int src,int n);


int main()
{
	
	
	int src,res;
	cout<<"\n\tEnter the no. of vertices::";
	cin>>n;
	cout<<"\n\tEnter matrix::";
	for(int i=0;i<n;i++)
	{
		cout<<"\n\tEnter"<<i<<" row:: \n";
		for(int j=0;j<n;j++)
		{
			cin>>mat[i][j];
		}
	}
	
	cout<<"\n\tMATRIX::";
	
	for(int i=0;i<n;i++)
	{
		cout<<"\n";
		for(int j=0;j<n;j++)
		{
			cout<<"\t"<<mat[i][j];
		}
	}	
	
	cout<<"\n\tEnter src::";
	cin>>src;
//	path[pin++]=src;
	res=tsp(mat,marked,src,n);
	cout<<"MIN DISTANCE"<<res;
	
/*	cout<<"path::";
	
	cout<<path[0]<<"-->";
	for(int i=pin;i>0;i--)
	{
		cout<<path[i]<<"-->";
	}*/
	
	return 0;
}

int tsp(int mat[10][10],int marked[10],int src,int n)
{
	int marked1[10];
	marked[src]=1;
	int min=999;
	int chk=0;
	int flag;
	int flagp=0;	
	
	
	for(int i=0;i<n;i++)
	{
		if(marked[i]==0)
		{
			for(int j=0;j<n;j++)
			{
				marked1[j]=marked[j];
			}
			flag=mat[src][i]+tsp(mat,marked1,i,n);
			if(flag<min)
			{	
				//flagp=1;
				//cout<<i<<" ";
				min=flag;
				//path[pin++]=i;
				//nexti=i;	
			}
			
			chk=1;
		
		}
		
	}
	
	
	if(chk==0)
	{
	//	path[pin++]=0;
		return mat[src][source];
	}
	return min;


}
